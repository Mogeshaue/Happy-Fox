# Generated by Django 4.2.23 on 2025-07-25 01:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('max_students', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('difficulty_level', models.CharField(default='beginner', max_length=50)),
                ('estimated_duration_weeks', models.PositiveIntegerField(default=8)),
                ('prerequisites', models.JSONField(default=list)),
                ('learning_objectives', models.JSONField(default=list)),
                ('tags', models.JSONField(default=list)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=100, unique=True)),
                ('billing_tier', models.CharField(default='free', max_length=50)),
                ('max_users', models.PositiveIntegerField(default=50)),
                ('current_user_count', models.PositiveIntegerField(default=0)),
                ('storage_limit_gb', models.DecimalField(decimal_places=2, default=5.0, max_digits=10)),
                ('api_rate_limit', models.PositiveIntegerField(default=1000)),
                ('openai_api_key', models.CharField(blank=True, max_length=255)),
                ('openai_free_trial', models.BooleanField(default=True)),
                ('default_logo_color', models.CharField(default='#6366f1', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='active', max_length=20)),
                ('join_policy', models.CharField(choices=[('open', 'Open to All'), ('invite_only', 'Invite Only'), ('request_to_join', 'Request to Join')], default='open', max_length=20)),
                ('max_members', models.PositiveIntegerField(default=10)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('session_count', models.PositiveIntegerField(default=0)),
                ('meeting_schedule', models.JSONField(default=dict, help_text='Regular meeting schedule')),
                ('meeting_link', models.URLField(blank=True, help_text='Recurring meeting link')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cohort', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='student_flow.cohort')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='student_flow.course')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_study_groups', to=settings.AUTH_USER_MODEL)),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_study_groups', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='student_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('learning_material', 'Learning Material'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('blocks', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=50)),
                ('difficulty_level', models.CharField(default='beginner', max_length=50)),
                ('estimated_time_minutes', models.PositiveIntegerField(default=30)),
                ('points', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_publish_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="Student's background and interests")),
                ('learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading_writing', 'Reading/Writing'), ('mixed', 'Mixed')], default='mixed', max_length=20)),
                ('preferred_difficulty', models.CharField(default='beginner', max_length=20)),
                ('study_hours_per_week', models.PositiveIntegerField(default=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('learning_objectives', models.JSONField(default=list, help_text='Personal learning objectives')),
                ('interests', models.JSONField(default=list, help_text='Areas of interest')),
                ('career_goals', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('suspended', 'Suspended'), ('on_break', 'On Break')], default='active', max_length=20)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('graduation_date', models.DateField(blank=True, null=True)),
                ('overall_grade', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('completed_courses', models.PositiveIntegerField(default=0)),
                ('total_study_hours', models.PositiveIntegerField(default=0)),
                ('streak_days', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('reminder_frequency', models.CharField(default='daily', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('notification_type', models.CharField(choices=[('course_update', 'Course Update'), ('assignment_due', 'Assignment Due'), ('grade_released', 'Grade Released'), ('new_content', 'New Content Available'), ('study_reminder', 'Study Reminder'), ('achievement', 'Achievement Unlocked'), ('goal_reminder', 'Goal Reminder'), ('study_group', 'Study Group Activity'), ('mentor_message', 'Mentor Message'), ('system_alert', 'System Alert')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('action_url', models.URLField(blank=True, help_text='URL for notification action')),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=100)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_via_email', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When notification should be auto-deleted', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional notification data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_notifications', to='student_flow.course')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_notifications', to=settings.AUTH_USER_MODEL)),
                ('study_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='student_flow.studygroup')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_notifications', to='student_flow.task')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('achievement_type', models.CharField(choices=[('completion', 'Course/Task Completion'), ('performance', 'Performance Milestone'), ('streak', 'Study Streak'), ('engagement', 'Engagement Achievement'), ('milestone', 'Learning Milestone'), ('special', 'Special Achievement')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('badge_icon', models.CharField(blank=True, max_length=100)),
                ('badge_color', models.CharField(default='#6366f1', max_length=7)),
                ('criteria_met', models.JSONField(default=dict, help_text='Criteria that were met')),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='student_flow.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='student_flow.task')),
            ],
            options={
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('timed_out', 'Timed Out')], default='in_progress', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('time_spent_minutes', models.PositiveIntegerField(default=0)),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('max_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('percentage_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_passed', models.BooleanField(default=False)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('answers', models.JSONField(default=dict, help_text='Student answers keyed by question ID')),
                ('question_order', models.JSONField(default=list, help_text='Order questions were presented')),
                ('feedback_shown', models.BooleanField(default=False)),
                ('can_retake', models.BooleanField(default=True)),
                ('review_mode', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='student_flow.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='student_flow.task')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('long_answer', 'Long Answer'), ('code', 'Code')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('blocks', models.TextField(blank=True)),
                ('context', models.TextField(blank=True)),
                ('correct_answer', models.TextField(blank=True)),
                ('explanation', models.TextField(blank=True)),
                ('points', models.PositiveIntegerField(default=1)),
                ('position', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.task')),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#6366f1', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('session_type', models.CharField(choices=[('learning_material', 'Learning Material'), ('quiz_practice', 'Quiz Practice'), ('assignment_work', 'Assignment Work'), ('project_work', 'Project Work'), ('review', 'Review'), ('study_group', 'Study Group')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('abandoned', 'Abandoned')], default='active', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('total_duration_minutes', models.PositiveIntegerField(default=0)),
                ('active_duration_minutes', models.PositiveIntegerField(default=0)),
                ('progress_at_start', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('progress_at_end', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('student_notes', models.TextField(blank=True)),
                ('difficulties_encountered', models.JSONField(default=list)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('browser', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='learning_sessions', to='student_flow.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_sessions', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='learning_sessions', to='student_flow.task')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('resource_type', models.CharField(choices=[('bookmark', 'Bookmark'), ('note', 'Personal Note'), ('summary', 'Summary'), ('flashcard', 'Flashcard'), ('external_link', 'External Link'), ('document', 'Document'), ('video', 'Video')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('content', models.TextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('file_url', models.URLField(blank=True)),
                ('tags', models.JSONField(default=list, help_text='Student-defined tags')),
                ('folder', models.CharField(blank=True, help_text='Organization folder', max_length=255)),
                ('is_public', models.BooleanField(default=False, help_text='Share with study group/classmates')),
                ('is_favorite', models.BooleanField(default=False)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_resources', to='student_flow.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_resources', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_resources', to='student_flow.task')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('skill_development', 'Skill Development'), ('career', 'Career'), ('personal', 'Personal'), ('project', 'Project')], default='academic', max_length=20)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('target_date', models.DateField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('success_criteria', models.JSONField(default=list, help_text='Measurable success criteria')),
                ('milestones', models.JSONField(default=list, help_text='Intermediate milestones')),
                ('notes', models.TextField(blank=True)),
                ('challenges', models.JSONField(default=list, help_text='Challenges encountered')),
                ('learnings', models.JSONField(default=list, help_text='Key learnings')),
                ('reminder_frequency', models.CharField(default='weekly', max_length=20)),
                ('last_reminder_sent', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_goals', to='student_flow.course')),
                ('related_tasks', models.ManyToManyField(blank=True, related_name='student_goals', to='student_flow.task')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['target_date', '-priority'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.organization'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.organization'),
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('graded', 'Graded'), ('returned', 'Returned for Revision'), ('resubmitted', 'Resubmitted')], default='draft', max_length=20)),
                ('content', models.TextField(help_text='Main submission content/answer')),
                ('file_urls', models.JSONField(default=list, help_text='List of uploaded file URLs')),
                ('metadata', models.JSONField(default=dict, help_text='Additional submission metadata')),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('max_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade_letter', models.CharField(blank=True, max_length=5)),
                ('is_passed', models.BooleanField(default=False)),
                ('grader_feedback', models.TextField(blank=True)),
                ('grading_rubric', models.JSONField(default=dict, help_text='Detailed grading breakdown')),
                ('student_response', models.TextField(blank=True)),
                ('revision_notes', models.TextField(blank=True)),
                ('requires_attention', models.BooleanField(default=False)),
                ('is_late', models.BooleanField(default=False)),
                ('plagiarism_checked', models.BooleanField(default=False)),
                ('plagiarism_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_submissions', to='student_flow.course')),
                ('grader', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('parent_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='student_flow.assignmentsubmission')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_submissions', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_submissions', to='student_flow.task')),
            ],
            options={
                'ordering': ['-submitted_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member')], default='member', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.JSONField(default=dict)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'org')},
            },
        ),
        migrations.CreateModel(
            name='UserCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='active', max_length=50)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.cohort')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='TaskCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('max_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('time_spent_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=1)),
                ('is_passed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='student_flow.question')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='student_flow.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'task'), ('user', 'question')},
            },
        ),
        migrations.CreateModel(
            name='StudyGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('inactive', 'Inactive'), ('removed', 'Removed')], default='pending', max_length=20)),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('creator', 'Creator')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('sessions_attended', models.PositiveIntegerField(default=0)),
                ('contributions', models.PositiveIntegerField(default=0)),
                ('join_message', models.TextField(blank=True, help_text='Message when requesting to join')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_memberships', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_group_memberships', to=settings.AUTH_USER_MODEL)),
                ('study_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='student_flow.studygroup')),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('study_group', 'student')},
            },
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('paused', 'Paused'), ('failed', 'Failed')], default='enrolled', max_length=20)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expected_completion_date', models.DateField(blank=True, null=True)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to='student_flow.cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to='student_flow.course')),
                ('current_milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='student_flow.milestone')),
                ('enrolled_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='enrollments_created', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-enrolled_at'],
                'unique_together': {('student', 'course', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='StudentAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('study_time_minutes', models.PositiveIntegerField(default=0)),
                ('sessions_count', models.PositiveIntegerField(default=0)),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('average_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('accuracy_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('courses_enrolled', models.PositiveIntegerField(default=0)),
                ('courses_in_progress', models.PositiveIntegerField(default=0)),
                ('courses_completed', models.PositiveIntegerField(default=0)),
                ('overall_progress', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('login_count', models.PositiveIntegerField(default=0)),
                ('resource_views', models.PositiveIntegerField(default=0)),
                ('forum_posts', models.PositiveIntegerField(default=0)),
                ('study_group_activities', models.PositiveIntegerField(default=0)),
                ('goals_created', models.PositiveIntegerField(default=0)),
                ('goals_completed', models.PositiveIntegerField(default=0)),
                ('goals_overdue', models.PositiveIntegerField(default=0)),
                ('study_streak_days', models.PositiveIntegerField(default=0)),
                ('achievements_earned', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('student', 'date')},
            },
        ),
        migrations.CreateModel(
            name='CourseTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.course')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='student_flow.milestone')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.task')),
            ],
            options={
                'ordering': ['ordering'],
                'unique_together': {('task', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField()),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.course')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.milestone')),
            ],
            options={
                'ordering': ['ordering'],
                'unique_together': {('course', 'milestone')},
            },
        ),
        migrations.CreateModel(
            name='CourseCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student_flow.course')),
            ],
            options={
                'unique_together': {('course', 'cohort')},
            },
        ),
    ]
