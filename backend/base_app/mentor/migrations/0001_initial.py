# Generated by Django 3.2.25 on 2025-07-24 13:03

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MentorshipAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('paused', 'Paused')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expected_duration_weeks', models.PositiveIntegerField(default=12, help_text='Expected duration in weeks')),
                ('notes', models.TextField(blank=True, help_text='Assignment notes and goals')),
                ('student_goals', models.TextField(default='[]', help_text='Specific learning goals for the student (JSON format)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignment_creator', to='students.student')),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentorship_assignments', to='mentor.cohort')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mentor.course')),
                ('mentor', models.ForeignKey(limit_choices_to={'usercohort__role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor_assignments', to='students.student')),
                ('student', models.ForeignKey(limit_choices_to={'usercohort__role': 'learner'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='students.student')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('mentor', 'student', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('default_logo_color', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('openai_api_key', models.TextField(blank=True, null=True)),
                ('openai_free_trial', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MentorshipGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('target_date', models.DateField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('success_criteria', models.TextField(default='[]', help_text='Criteria for measuring goal completion (JSON format)')),
                ('milestones', models.TextField(default='[]', help_text='Intermediate milestones (JSON format)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='mentor.mentorshipassignment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_goals', to='students.student')),
            ],
            options={
                'ordering': ['target_date', '-priority'],
            },
        ),
        migrations.CreateModel(
            name='MentorSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('session_type', models.CharField(choices=[('one_on_one', 'One-on-One'), ('group', 'Group Session'), ('workshop', 'Workshop'), ('code_review', 'Code Review'), ('career_guidance', 'Career Guidance')], default='one_on_one', max_length=20)),
                ('scheduled_at', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('actual_duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('meeting_link', models.URLField(blank=True, help_text='Video call link')),
                ('meeting_notes', models.TextField(blank=True)),
                ('agenda', models.TextField(default='[]', help_text='Session agenda items (JSON format)')),
                ('outcomes', models.TextField(default='[]', help_text='Session outcomes and action items (JSON format)')),
                ('student_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('mentor_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='mentor.mentorshipassignment')),
            ],
            options={
                'ordering': ['-scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='MentorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="Mentor's background and experience")),
                ('expertise_areas', models.TextField(default='[]', help_text='List of expertise areas (JSON format)')),
                ('experience_level', models.CharField(choices=[('junior', 'Junior (0-2 years)'), ('mid', 'Mid-level (2-5 years)'), ('senior', 'Senior (5-10 years)'), ('expert', 'Expert (10+ years)')], max_length=20)),
                ('max_students', models.PositiveIntegerField(default=10, help_text='Maximum number of students this mentor can handle')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('availability_schedule', models.TextField(default='{}', help_text='Weekly availability schedule (JSON format)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('on_leave', 'On Leave')], default='active', max_length=20)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_profile', to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='MentorNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('notification_type', models.CharField(choices=[('new_assignment', 'New Assignment'), ('session_reminder', 'Session Reminder'), ('message_received', 'Message Received'), ('student_progress', 'Student Progress Update'), ('feedback_request', 'Feedback Request'), ('goal_deadline', 'Goal Deadline Approaching'), ('system_alert', 'System Alert')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.URLField(blank=True)),
                ('metadata', models.TextField(default='{}', help_text='Notification metadata (JSON format)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mentor.mentorshipassignment')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_notifications', to='students.student')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mentor.mentorsession')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MentorMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('file', 'File'), ('link', 'Link'), ('task_feedback', 'Task Feedback')], default='text', max_length=20)),
                ('content', models.TextField()),
                ('file_url', models.URLField(blank=True)),
                ('metadata', models.TextField(default='{}', help_text='Additional message metadata (JSON format)')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='mentor.mentorshipassignment')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='mentor.mentormessage')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_mentor_messages', to='students.student')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='MentorFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('feedback_type', models.CharField(choices=[('task_review', 'Task Review'), ('general_feedback', 'General Feedback'), ('skill_assessment', 'Skill Assessment'), ('career_advice', 'Career Advice')], default='general_feedback', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('task_id', models.PositiveIntegerField(blank=True, help_text='ID of the task being reviewed', null=True)),
                ('question_id', models.PositiveIntegerField(blank=True, help_text='ID of the question being reviewed', null=True)),
                ('overall_score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('strengths', models.TextField(default='[]', help_text='List of identified strengths (JSON format)')),
                ('improvement_areas', models.TextField(default='[]', help_text='Areas for improvement (JSON format)')),
                ('action_items', models.TextField(default='[]', help_text='Specific action items for student (JSON format)')),
                ('student_acknowledged', models.BooleanField(default=False)),
                ('student_response', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_given', to='mentor.mentorshipassignment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.organization'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.organization'),
        ),
        migrations.CreateModel(
            name='UserOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
            ],
            options={
                'unique_together': {('user', 'org')},
            },
        ),
        migrations.CreateModel(
            name='UserCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.cohort')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
            ],
            options={
                'unique_together': {('user', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('time_spent_minutes', models.PositiveIntegerField(default=0)),
                ('engagement_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('technical_skills_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('communication_skills_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('problem_solving_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('mentor_notes', models.TextField(blank=True)),
                ('student_reflection', models.TextField(blank=True)),
                ('goals_achieved', models.TextField(default='[]', help_text='Goals achieved (JSON format)')),
                ('challenges_faced', models.TextField(default='[]', help_text='Challenges faced (JSON format)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to='mentor.mentorshipassignment')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('assignment', 'date')},
            },
        ),
        migrations.CreateModel(
            name='MentorAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('sessions_conducted', models.PositiveIntegerField(default=0)),
                ('total_session_time_minutes', models.PositiveIntegerField(default=0)),
                ('average_session_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('active_students', models.PositiveIntegerField(default=0)),
                ('students_helped', models.PositiveIntegerField(default=0)),
                ('messages_sent', models.PositiveIntegerField(default=0)),
                ('feedback_given', models.PositiveIntegerField(default=0)),
                ('student_satisfaction', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('goal_completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_analytics', to='students.student')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('mentor', 'date')},
            },
        ),
        migrations.CreateModel(
            name='CourseCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_drip_enabled', models.BooleanField(default=False)),
                ('frequency_value', models.IntegerField(blank=True, null=True)),
                ('frequency_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('publish_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mentor.course')),
            ],
            options={
                'unique_together': {('course', 'cohort')},
            },
        ),
    ]
