# Generated by Django 4.2.23 on 2025-07-25 01:29

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('default_logo_color', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('openai_api_key', models.TextField(blank=True, null=True)),
                ('openai_free_trial', models.BooleanField(default=False)),
                ('billing_tier', models.CharField(default='free', help_text='Billing tier for the organization', max_length=50)),
                ('max_users', models.PositiveIntegerField(default=100, help_text='Maximum users allowed')),
                ('storage_limit_gb', models.PositiveIntegerField(default=10, help_text='Storage limit in GB')),
                ('api_rate_limit', models.PositiveIntegerField(default=1000, help_text='API calls per hour')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('default_dp_color', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('learning_material', 'Learning Material'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('blocks', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=50)),
                ('difficulty_level', models.CharField(default='beginner', max_length=50)),
                ('estimated_time_minutes', models.PositiveIntegerField(default=30)),
                ('points', models.PositiveIntegerField(default=10, help_text='Points awarded for completion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_publish_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_flow.user')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('value_type', models.CharField(default='string', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Hide value in admin interface')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_flow.user')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('coding', 'Coding'), ('essay', 'Essay')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('answer', models.TextField(blank=True, null=True)),
                ('options', models.JSONField(default=list, help_text='Multiple choice options')),
                ('explanation', models.TextField(blank=True)),
                ('points', models.PositiveIntegerField(default=1)),
                ('difficulty_level', models.CharField(default='medium', max_length=50)),
                ('position', models.IntegerField()),
                ('max_attempts', models.IntegerField(blank=True, null=True)),
                ('is_feedback_shown', models.BooleanField(default=True)),
                ('context', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='admin_flow.task')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True)),
                ('estimated_hours', models.PositiveIntegerField(default=5, help_text='Estimated hours to complete')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('difficulty_level', models.CharField(default='beginner', max_length=50)),
                ('estimated_duration_weeks', models.PositiveIntegerField(default=8)),
                ('prerequisites', models.JSONField(default=list, help_text='List of prerequisite course IDs')),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives')),
                ('tags', models.JSONField(default=list, help_text='Course tags for categorization')),
                ('thumbnail_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_flow.user')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='ContentTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('course', 'Course Template'), ('learning_material', 'Learning Material Template'), ('quiz', 'Quiz Template'), ('assignment', 'Assignment Template')], max_length=50)),
                ('description', models.TextField()),
                ('template_data', models.JSONField(help_text='Template structure and content')),
                ('is_global', models.BooleanField(default=False, help_text='Available to all organizations')),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_flow.user')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='ContentGenerationJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('job_type', models.CharField(choices=[('course_structure', 'Course Structure'), ('learning_material', 'Learning Material'), ('quiz_questions', 'Quiz Questions'), ('bulk_content', 'Bulk Content Generation')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Progress percentage')),
                ('input_data', models.JSONField(help_text='Job input parameters')),
                ('output_data', models.JSONField(default=dict, help_text='Generated content')),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.course')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
                ('started_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.user')),
            ],
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('max_students', models.PositiveIntegerField(default=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
        ),
        migrations.CreateModel(
            name='BulkOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('operation_type', models.CharField(choices=[('user_import', 'User Import'), ('content_import', 'Content Import'), ('bulk_enroll', 'Bulk Enrollment'), ('bulk_unenroll', 'Bulk Unenrollment'), ('bulk_delete', 'Bulk Delete'), ('bulk_update', 'Bulk Update'), ('data_export', 'Data Export')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('partially_completed', 'Partially Completed')], default='pending', max_length=50)),
                ('progress', models.PositiveIntegerField(default=0)),
                ('total_items', models.PositiveIntegerField(default=0)),
                ('processed_items', models.PositiveIntegerField(default=0)),
                ('success_count', models.PositiveIntegerField(default=0)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('input_file_url', models.URLField(blank=True)),
                ('output_file_url', models.URLField(blank=True)),
                ('error_log', models.TextField(blank=True)),
                ('parameters', models.JSONField(default=dict, help_text='Operation parameters')),
                ('results', models.JSONField(default=dict, help_text='Operation results')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
                ('started_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.user')),
            ],
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('org_admin', 'Organization Admin'), ('content_admin', 'Content Admin'), ('support_admin', 'Support Admin')], default='org_admin', max_length=50)),
                ('permissions', models.JSONField(default=list, help_text='List of specific permissions')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizations', models.ManyToManyField(blank=True, help_text='Organizations this admin can manage', to='admin_flow.organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to='admin_flow.user')),
            ],
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('system_alert', 'System Alert'), ('user_signup', 'New User Signup'), ('content_published', 'Content Published'), ('billing_alert', 'Billing Alert'), ('security_alert', 'Security Alert'), ('generation_complete', 'Content Generation Complete')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('related_object_type', models.CharField(blank=True, max_length=100)),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('action_url', models.URLField(blank=True)),
                ('metadata', models.JSONField(default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_notifications', to='admin_flow.user')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdminDashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('widget_type', models.CharField(choices=[('metric', 'Metric'), ('chart', 'Chart'), ('table', 'Table'), ('list', 'List'), ('map', 'Map')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=2)),
                ('height', models.PositiveIntegerField(default=2)),
                ('configuration', models.JSONField(default=dict, help_text='Widget configuration')),
                ('data_source', models.CharField(help_text='Data source identifier', max_length=100)),
                ('refresh_interval', models.PositiveIntegerField(default=300, help_text='Refresh interval in seconds')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_widgets', to='admin_flow.user')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
            options={
                'ordering': ['position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='AdminAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('permission_change', 'Permission Change'), ('bulk_operation', 'Bulk Operation'), ('content_generation', 'Content Generation'), ('data_export', 'Data Export'), ('system_config', 'System Configuration')], max_length=50)),
                ('object_type', models.CharField(help_text='Type of object affected (User, Course, etc.)', max_length=100)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('object_name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField()),
                ('details', models.JSONField(default=dict, help_text='Additional action details')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to='admin_flow.user')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_flow.organization')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member')], default='member', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.JSONField(default=dict, help_text='Custom permissions for this user')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.user')),
            ],
            options={
                'unique_together': {('user', 'org')},
            },
        ),
        migrations.CreateModel(
            name='UserCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='active', max_length=50)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.cohort')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.user')),
            ],
            options={
                'unique_together': {('user', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='TaskCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('max_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('time_spent_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=1)),
                ('is_passed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.question')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.user')),
            ],
            options={
                'unique_together': {('user', 'task'), ('user', 'question')},
            },
        ),
        migrations.CreateModel(
            name='CourseTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.course')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_flow.milestone')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.task')),
            ],
            options={
                'ordering': ['ordering'],
                'unique_together': {('task', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField()),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.course')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.milestone')),
            ],
            options={
                'ordering': ['ordering'],
                'unique_together': {('course', 'milestone')},
            },
        ),
        migrations.CreateModel(
            name='CourseCohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_drip_enabled', models.BooleanField(default=False)),
                ('frequency_value', models.IntegerField(blank=True, null=True)),
                ('frequency_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('publish_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.course')),
            ],
            options={
                'unique_together': {('course', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='AdminAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_users', models.PositiveIntegerField(default=0)),
                ('new_users', models.PositiveIntegerField(default=0)),
                ('active_users', models.PositiveIntegerField(default=0)),
                ('total_courses', models.PositiveIntegerField(default=0)),
                ('new_courses', models.PositiveIntegerField(default=0)),
                ('total_tasks', models.PositiveIntegerField(default=0)),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('avg_session_duration', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('api_calls', models.PositiveIntegerField(default=0)),
                ('storage_used_gb', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('content_generations', models.PositiveIntegerField(default=0)),
                ('ai_api_calls', models.PositiveIntegerField(default=0)),
                ('ai_cost_usd', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_flow.organization')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('organization', 'date')},
            },
        ),
    ]
